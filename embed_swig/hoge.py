# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hoge')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hoge')
    _hoge = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hoge', [dirname(__file__)])
        except ImportError:
            import _hoge
            return _hoge
        if fp is not None:
            try:
                _mod = imp.load_module('_hoge', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hoge = swig_import_helper()
    del swig_import_helper
else:
    import _hoge
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hoge.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hoge.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hoge.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hoge.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hoge.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hoge.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hoge.SwigPyIterator_copy(self)

    def next(self):
        return _hoge.SwigPyIterator_next(self)

    def __next__(self):
        return _hoge.SwigPyIterator___next__(self)

    def previous(self):
        return _hoge.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hoge.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hoge.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hoge.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hoge.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hoge.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hoge.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hoge.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hoge.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hoge.new_IntArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hoge.delete_IntArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hoge.IntArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hoge.IntArray___setitem__(self, index, value)

    def cast(self):
        return _hoge.IntArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_hoge.IntArray_frompointer)
    else:
        frompointer = _hoge.IntArray_frompointer
IntArray_swigregister = _hoge.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(t):
    return _hoge.IntArray_frompointer(t)
IntArray_frompointer = _hoge.IntArray_frompointer

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hoge.new_DoubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hoge.delete_DoubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hoge.DoubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hoge.DoubleArray___setitem__(self, index, value)

    def cast(self):
        return _hoge.DoubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_hoge.DoubleArray_frompointer)
    else:
        frompointer = _hoge.DoubleArray_frompointer
DoubleArray_swigregister = _hoge.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

def DoubleArray_frompointer(t):
    return _hoge.DoubleArray_frompointer(t)
DoubleArray_frompointer = _hoge.DoubleArray_frompointer

class Vector3dArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3dArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3dArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hoge.new_Vector3dArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hoge.delete_Vector3dArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hoge.Vector3dArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hoge.Vector3dArray___setitem__(self, index, value)

    def cast(self):
        return _hoge.Vector3dArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_hoge.Vector3dArray_frompointer)
    else:
        frompointer = _hoge.Vector3dArray_frompointer
Vector3dArray_swigregister = _hoge.Vector3dArray_swigregister
Vector3dArray_swigregister(Vector3dArray)

def Vector3dArray_frompointer(t):
    return _hoge.Vector3dArray_frompointer(t)
Vector3dArray_frompointer = _hoge.Vector3dArray_frompointer


def myFact(n):
    return _hoge.myFact(n)
myFact = _hoge.myFact

def myMod(x, y):
    return _hoge.myMod(x, y)
myMod = _hoge.myMod

def myTime():
    return _hoge.myTime()
myTime = _hoge.myTime
class Vector3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _hoge.Vector3d_x_set
    __swig_getmethods__["x"] = _hoge.Vector3d_x_get
    if _newclass:
        x = _swig_property(_hoge.Vector3d_x_get, _hoge.Vector3d_x_set)
    __swig_setmethods__["y"] = _hoge.Vector3d_y_set
    __swig_getmethods__["y"] = _hoge.Vector3d_y_get
    if _newclass:
        y = _swig_property(_hoge.Vector3d_y_get, _hoge.Vector3d_y_set)
    __swig_setmethods__["z"] = _hoge.Vector3d_z_set
    __swig_getmethods__["z"] = _hoge.Vector3d_z_get
    if _newclass:
        z = _swig_property(_hoge.Vector3d_z_get, _hoge.Vector3d_z_set)

    def __init__(self):
        this = _hoge.new_Vector3d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hoge.delete_Vector3d
    __del__ = lambda self: None
Vector3d_swigregister = _hoge.Vector3d_swigregister
Vector3d_swigregister(Vector3d)
cvar = _hoge.cvar

class BigData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BigData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BigData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _hoge.BigData_n_set
    __swig_getmethods__["n"] = _hoge.BigData_n_get
    if _newclass:
        n = _swig_property(_hoge.BigData_n_get, _hoge.BigData_n_set)
    __swig_setmethods__["iarr"] = _hoge.BigData_iarr_set
    __swig_getmethods__["iarr"] = _hoge.BigData_iarr_get
    if _newclass:
        iarr = _swig_property(_hoge.BigData_iarr_get, _hoge.BigData_iarr_set)
    __swig_setmethods__["darr"] = _hoge.BigData_darr_set
    __swig_getmethods__["darr"] = _hoge.BigData_darr_get
    if _newclass:
        darr = _swig_property(_hoge.BigData_darr_get, _hoge.BigData_darr_set)
    __swig_setmethods__["varr"] = _hoge.BigData_varr_set
    __swig_getmethods__["varr"] = _hoge.BigData_varr_get
    if _newclass:
        varr = _swig_property(_hoge.BigData_varr_get, _hoge.BigData_varr_set)

    def __init__(self):
        this = _hoge.new_BigData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hoge.delete_BigData
    __del__ = lambda self: None
BigData_swigregister = _hoge.BigData_swigregister
BigData_swigregister(BigData)


def allocBigData(n):
    return _hoge.allocBigData(n)
allocBigData = _hoge.allocBigData

def freeBigData():
    return _hoge.freeBigData()
freeBigData = _hoge.freeBigData

def getBigData():
    return _hoge.getBigData()
getBigData = _hoge.getBigData
# This file is compatible with both classic and new-style classes.


